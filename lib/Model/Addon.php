<?php
/**
 * Addon
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Everyday\GmodStore\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GmodStore API
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: unset
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Everyday\GmodStore\Sdk\Model;

use \ArrayAccess;
use \Everyday\GmodStore\Sdk\ObjectSerializer;

/**
 * Addon Class Doc Comment
 *
 * @category Class
 * @package  Everyday\GmodStore\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Addon implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Addon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'active' => 'bool',
        'name' => 'string',
        'shortDescription' => 'string',
        'description' => 'string',
        'requirements' => 'string[]',
        'price' => '\Everyday\GmodStore\Sdk\Model\AddonPrice',
        'images' => '\Everyday\GmodStore\Sdk\Model\AddonImages',
        'views' => 'int',
        'ratingAvg' => 'string',
        'ratingCount' => 'int',
        'purchasesCount' => 'int',
        'dependentAddon' => 'int',
        'hasDrm' => 'bool',
        'requiresChromium' => 'bool',
        'slug' => 'string',
        'route' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'latestVersion' => '\Everyday\GmodStore\Sdk\Model\AddonVersion',
        'team' => '\Everyday\GmodStore\Sdk\Model\Team',
        'stats' => '\Everyday\GmodStore\Sdk\Model\AddonStats'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'active' => null,
        'name' => null,
        'shortDescription' => null,
        'description' => null,
        'requirements' => null,
        'price' => null,
        'images' => null,
        'views' => null,
        'ratingAvg' => null,
        'ratingCount' => null,
        'purchasesCount' => null,
        'dependentAddon' => null,
        'hasDrm' => null,
        'requiresChromium' => null,
        'slug' => null,
        'route' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'latestVersion' => null,
        'team' => null,
        'stats' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'active' => 'active',
        'name' => 'name',
        'shortDescription' => 'short_description',
        'description' => 'description',
        'requirements' => 'requirements',
        'price' => 'price',
        'images' => 'images',
        'views' => 'views',
        'ratingAvg' => 'rating_avg',
        'ratingCount' => 'rating_count',
        'purchasesCount' => 'purchases_count',
        'dependentAddon' => 'dependent_addon',
        'hasDrm' => 'has_drm',
        'requiresChromium' => 'requires_chromium',
        'slug' => 'slug',
        'route' => 'route',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'latestVersion' => 'latest_version',
        'team' => 'team',
        'stats' => 'stats'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'active' => 'setActive',
        'name' => 'setName',
        'shortDescription' => 'setShortDescription',
        'description' => 'setDescription',
        'requirements' => 'setRequirements',
        'price' => 'setPrice',
        'images' => 'setImages',
        'views' => 'setViews',
        'ratingAvg' => 'setRatingAvg',
        'ratingCount' => 'setRatingCount',
        'purchasesCount' => 'setPurchasesCount',
        'dependentAddon' => 'setDependentAddon',
        'hasDrm' => 'setHasDrm',
        'requiresChromium' => 'setRequiresChromium',
        'slug' => 'setSlug',
        'route' => 'setRoute',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'latestVersion' => 'setLatestVersion',
        'team' => 'setTeam',
        'stats' => 'setStats'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'active' => 'getActive',
        'name' => 'getName',
        'shortDescription' => 'getShortDescription',
        'description' => 'getDescription',
        'requirements' => 'getRequirements',
        'price' => 'getPrice',
        'images' => 'getImages',
        'views' => 'getViews',
        'ratingAvg' => 'getRatingAvg',
        'ratingCount' => 'getRatingCount',
        'purchasesCount' => 'getPurchasesCount',
        'dependentAddon' => 'getDependentAddon',
        'hasDrm' => 'getHasDrm',
        'requiresChromium' => 'getRequiresChromium',
        'slug' => 'getSlug',
        'route' => 'getRoute',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'latestVersion' => 'getLatestVersion',
        'team' => 'getTeam',
        'stats' => 'getStats'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['shortDescription'] = $data['shortDescription'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['requirements'] = $data['requirements'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['images'] = $data['images'] ?? null;
        $this->container['views'] = $data['views'] ?? null;
        $this->container['ratingAvg'] = $data['ratingAvg'] ?? null;
        $this->container['ratingCount'] = $data['ratingCount'] ?? null;
        $this->container['purchasesCount'] = $data['purchasesCount'] ?? null;
        $this->container['dependentAddon'] = $data['dependentAddon'] ?? null;
        $this->container['hasDrm'] = $data['hasDrm'] ?? null;
        $this->container['requiresChromium'] = $data['requiresChromium'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['route'] = $data['route'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
        $this->container['latestVersion'] = $data['latestVersion'] ?? null;
        $this->container['team'] = $data['team'] ?? null;
        $this->container['stats'] = $data['stats'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shortDescription
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['shortDescription'];
    }

    /**
     * Sets shortDescription
     *
     * @param string|null $shortDescription shortDescription
     *
     * @return self
     */
    public function setShortDescription($shortDescription)
    {
        $this->container['shortDescription'] = $shortDescription;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return string[]|null
     */
    public function getRequirements()
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param string[]|null $requirements requirements
     *
     * @return self
     */
    public function setRequirements($requirements)
    {
        $this->container['requirements'] = $requirements;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Everyday\GmodStore\Sdk\Model\AddonPrice|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Everyday\GmodStore\Sdk\Model\AddonPrice|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Everyday\GmodStore\Sdk\Model\AddonImages|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Everyday\GmodStore\Sdk\Model\AddonImages|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets views
     *
     * @return int|null
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param int|null $views views
     *
     * @return self
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }

    /**
     * Gets ratingAvg
     *
     * @return string|null
     */
    public function getRatingAvg()
    {
        return $this->container['ratingAvg'];
    }

    /**
     * Sets ratingAvg
     *
     * @param string|null $ratingAvg ratingAvg
     *
     * @return self
     */
    public function setRatingAvg($ratingAvg)
    {
        $this->container['ratingAvg'] = $ratingAvg;

        return $this;
    }

    /**
     * Gets ratingCount
     *
     * @return int|null
     */
    public function getRatingCount()
    {
        return $this->container['ratingCount'];
    }

    /**
     * Sets ratingCount
     *
     * @param int|null $ratingCount ratingCount
     *
     * @return self
     */
    public function setRatingCount($ratingCount)
    {
        $this->container['ratingCount'] = $ratingCount;

        return $this;
    }

    /**
     * Gets purchasesCount
     *
     * @return int|null
     */
    public function getPurchasesCount()
    {
        return $this->container['purchasesCount'];
    }

    /**
     * Sets purchasesCount
     *
     * @param int|null $purchasesCount purchasesCount
     *
     * @return self
     */
    public function setPurchasesCount($purchasesCount)
    {
        $this->container['purchasesCount'] = $purchasesCount;

        return $this;
    }

    /**
     * Gets dependentAddon
     *
     * @return int|null
     */
    public function getDependentAddon()
    {
        return $this->container['dependentAddon'];
    }

    /**
     * Sets dependentAddon
     *
     * @param int|null $dependentAddon dependentAddon
     *
     * @return self
     */
    public function setDependentAddon($dependentAddon)
    {
        $this->container['dependentAddon'] = $dependentAddon;

        return $this;
    }

    /**
     * Gets hasDrm
     *
     * @return bool|null
     */
    public function getHasDrm()
    {
        return $this->container['hasDrm'];
    }

    /**
     * Sets hasDrm
     *
     * @param bool|null $hasDrm hasDrm
     *
     * @return self
     */
    public function setHasDrm($hasDrm)
    {
        $this->container['hasDrm'] = $hasDrm;

        return $this;
    }

    /**
     * Gets requiresChromium
     *
     * @return bool|null
     */
    public function getRequiresChromium()
    {
        return $this->container['requiresChromium'];
    }

    /**
     * Sets requiresChromium
     *
     * @param bool|null $requiresChromium requiresChromium
     *
     * @return self
     */
    public function setRequiresChromium($requiresChromium)
    {
        $this->container['requiresChromium'] = $requiresChromium;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets route
     *
     * @return string|null
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param string|null $route route
     *
     * @return self
     */
    public function setRoute($route)
    {
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets latestVersion
     *
     * @return \Everyday\GmodStore\Sdk\Model\AddonVersion|null
     */
    public function getLatestVersion()
    {
        return $this->container['latestVersion'];
    }

    /**
     * Sets latestVersion
     *
     * @param \Everyday\GmodStore\Sdk\Model\AddonVersion|null $latestVersion latestVersion
     *
     * @return self
     */
    public function setLatestVersion($latestVersion)
    {
        $this->container['latestVersion'] = $latestVersion;

        return $this;
    }

    /**
     * Gets team
     *
     * @return \Everyday\GmodStore\Sdk\Model\Team|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param \Everyday\GmodStore\Sdk\Model\Team|null $team team
     *
     * @return self
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Everyday\GmodStore\Sdk\Model\AddonStats|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Everyday\GmodStore\Sdk\Model\AddonStats|null $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


