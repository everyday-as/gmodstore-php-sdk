<?php
/**
 * NewPersonalAccessTokenPayload
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Everyday\GmodStore\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * gmodstore
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: unset
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Everyday\GmodStore\Sdk\Model;

use \ArrayAccess;
use \Everyday\GmodStore\Sdk\ObjectSerializer;

/**
 * NewPersonalAccessTokenPayload Class Doc Comment
 *
 * @category Class
 * @package  Everyday\GmodStore\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class NewPersonalAccessTokenPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewPersonalAccessTokenPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'expiresAt' => '\DateTime',
        'abilities' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'expiresAt' => 'date-time',
        'abilities' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'expiresAt' => 'expiresAt',
        'abilities' => 'abilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'expiresAt' => 'setExpiresAt',
        'abilities' => 'setAbilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'expiresAt' => 'getExpiresAt',
        'abilities' => 'getAbilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ABILITIES_PERMISSION_GROUPSREAD = 'permission-groups:read';
    const ABILITIES_PERMISSION_GROUPSWRITE = 'permission-groups:write';
    const ABILITIES_TEAMSREAD = 'teams:read';
    const ABILITIES_TEAMSWRITE = 'teams:write';
    const ABILITIES_TEAM_USERSREAD = 'team-users:read';
    const ABILITIES_TEAM_USERSWRITE = 'team-users:write';
    const ABILITIES_PRODUCTSREAD = 'products:read';
    const ABILITIES_PRODUCTSWRITE = 'products:write';
    const ABILITIES_PRODUCT_COUPONSREAD = 'product-coupons:read';
    const ABILITIES_PRODUCT_COUPONSWRITE = 'product-coupons:write';
    const ABILITIES_PRODUCT_PURCHASESREAD = 'product-purchases:read';
    const ABILITIES_PRODUCT_PURCHASESWRITE = 'product-purchases:write';
    const ABILITIES_PRODUCT_REVIEWSREAD = 'product-reviews:read';
    const ABILITIES_PRODUCT_REVIEWSWRITE = 'product-reviews:write';
    const ABILITIES_PRODUCT_VERSIONSREAD = 'product-versions:read';
    const ABILITIES_PRODUCT_VERSIONSWRITE = 'product-versions:write';
    const ABILITIES_PRODUCT_VERSIONSDOWNLOAD = 'product-versions:download';
    const ABILITIES_USERSREAD = 'users:read';
    const ABILITIES_USERSWRITE = 'users:write';
    const ABILITIES_USER_BADGESREAD = 'user-badges:read';
    const ABILITIES_USER_BADGESWRITE = 'user-badges:write';
    const ABILITIES_USER_BANSREAD = 'user-bans:read';
    const ABILITIES_USER_PURCHASESREAD = 'user-purchases:read';
    const ABILITIES_STAR = '*';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAbilitiesAllowableValues()
    {
        return [
            self::ABILITIES_PERMISSION_GROUPSREAD,
            self::ABILITIES_PERMISSION_GROUPSWRITE,
            self::ABILITIES_TEAMSREAD,
            self::ABILITIES_TEAMSWRITE,
            self::ABILITIES_TEAM_USERSREAD,
            self::ABILITIES_TEAM_USERSWRITE,
            self::ABILITIES_PRODUCTSREAD,
            self::ABILITIES_PRODUCTSWRITE,
            self::ABILITIES_PRODUCT_COUPONSREAD,
            self::ABILITIES_PRODUCT_COUPONSWRITE,
            self::ABILITIES_PRODUCT_PURCHASESREAD,
            self::ABILITIES_PRODUCT_PURCHASESWRITE,
            self::ABILITIES_PRODUCT_REVIEWSREAD,
            self::ABILITIES_PRODUCT_REVIEWSWRITE,
            self::ABILITIES_PRODUCT_VERSIONSREAD,
            self::ABILITIES_PRODUCT_VERSIONSWRITE,
            self::ABILITIES_PRODUCT_VERSIONSDOWNLOAD,
            self::ABILITIES_USERSREAD,
            self::ABILITIES_USERSWRITE,
            self::ABILITIES_USER_BADGESREAD,
            self::ABILITIES_USER_BADGESWRITE,
            self::ABILITIES_USER_BANSREAD,
            self::ABILITIES_USER_PURCHASESREAD,
            self::ABILITIES_STAR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['expiresAt'] = $data['expiresAt'] ?? null;
        $this->container['abilities'] = $data['abilities'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 3)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['abilities'] === null) {
            $invalidProperties[] = "'abilities' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling NewPersonalAccessTokenPayload., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 3)) {
            throw new \InvalidArgumentException('invalid length for $name when calling NewPersonalAccessTokenPayload., must be bigger than or equal to 3.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets expiresAt
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     *
     * @param \DateTime|null $expiresAt expiresAt
     *
     * @return self
     */
    public function setExpiresAt($expiresAt)
    {
        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets abilities
     *
     * @return string[]
     */
    public function getAbilities()
    {
        return $this->container['abilities'];
    }

    /**
     * Sets abilities
     *
     * @param string[] $abilities abilities
     *
     * @return self
     */
    public function setAbilities($abilities)
    {
        $allowedValues = $this->getAbilitiesAllowableValues();
        if (array_diff($abilities, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'abilities', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        $this->container['abilities'] = $abilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


