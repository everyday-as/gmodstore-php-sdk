<?php
/**
 * NewUserBadgePayload
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Everyday\GmodStore\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * gmodstore
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: unset
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Everyday\GmodStore\Sdk\Model;

use \ArrayAccess;
use \Everyday\GmodStore\Sdk\ObjectSerializer;

/**
 * NewUserBadgePayload Class Doc Comment
 *
 * @category Class
 * @package  Everyday\GmodStore\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class NewUserBadgePayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewUserBadgePayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'badgeId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'badgeId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'badgeId' => 'badge_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'badgeId' => 'setBadgeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'badgeId' => 'getBadgeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BADGE_ID__2FA = '2fa';
    const BADGE_ID_ADDON_SUBMIT = 'addon-submit';
    const BADGE_ID_FORUM_POST = 'forum-post';
    const BADGE_ID_BETA = 'beta';
    const BADGE_ID_FIRST_PURCHASE = 'first-purchase';
    const BADGE_ID_RECEIVED_MESSAGE = 'received-message';
    const BADGE_ID_COAL = 'coal';
    const BADGE_ID_CONTRIBUTION = 'contribution';
    const BADGE_ID_DEVELOPER = 'developer';
    const BADGE_ID_DISCORD_BOOSTER = 'discord-booster';
    const BADGE_ID_DOWNLOAD = 'download';
    const BADGE_ID_JOB = 'job';
    const BADGE_ID_FEATURED = 'featured';
    const BADGE_ID_SPONSOR = 'sponsor';
    const BADGE_ID_KAWAII = 'kawaii';
    const BADGE_ID_CROWN = 'crown';
    const BADGE_ID_FAVOURITES = 'favourites';
    const BADGE_ID_SHIBA = 'shiba';
    const BADGE_ID_NEGOTIATED = 'negotiated';
    const BADGE_ID_PUG = 'pug';
    const BADGE_ID_EX_STAFF = 'ex-staff';
    const BADGE_ID_ASPIRING = 'aspiring';
    const BADGE_ID_STAFF = 'staff';
    const BADGE_ID_PUSH = 'push';
    const BADGE_ID_BOUGHT = 'bought';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBadgeIdAllowableValues()
    {
        return [
            self::BADGE_ID__2FA,
            self::BADGE_ID_ADDON_SUBMIT,
            self::BADGE_ID_FORUM_POST,
            self::BADGE_ID_BETA,
            self::BADGE_ID_FIRST_PURCHASE,
            self::BADGE_ID_RECEIVED_MESSAGE,
            self::BADGE_ID_COAL,
            self::BADGE_ID_CONTRIBUTION,
            self::BADGE_ID_DEVELOPER,
            self::BADGE_ID_DISCORD_BOOSTER,
            self::BADGE_ID_DOWNLOAD,
            self::BADGE_ID_JOB,
            self::BADGE_ID_FEATURED,
            self::BADGE_ID_SPONSOR,
            self::BADGE_ID_KAWAII,
            self::BADGE_ID_CROWN,
            self::BADGE_ID_FAVOURITES,
            self::BADGE_ID_SHIBA,
            self::BADGE_ID_NEGOTIATED,
            self::BADGE_ID_PUG,
            self::BADGE_ID_EX_STAFF,
            self::BADGE_ID_ASPIRING,
            self::BADGE_ID_STAFF,
            self::BADGE_ID_PUSH,
            self::BADGE_ID_BOUGHT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['badgeId'] = $data['badgeId'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['badgeId'] === null) {
            $invalidProperties[] = "'badgeId' can't be null";
        }
        $allowedValues = $this->getBadgeIdAllowableValues();
        if (!is_null($this->container['badgeId']) && !in_array($this->container['badgeId'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'badgeId', must be one of '%s'",
                $this->container['badgeId'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets badgeId
     *
     * @return string
     */
    public function getBadgeId()
    {
        return $this->container['badgeId'];
    }

    /**
     * Sets badgeId
     *
     * @param string $badgeId badgeId
     *
     * @return self
     */
    public function setBadgeId($badgeId)
    {
        $allowedValues = $this->getBadgeIdAllowableValues();
        if (!in_array($badgeId, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'badgeId', must be one of '%s'",
                    $badgeId,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['badgeId'] = $badgeId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


