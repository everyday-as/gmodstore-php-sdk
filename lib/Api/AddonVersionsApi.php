<?php
/**
 * AddonVersionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Everyday\GmodStoreSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GmodStore
 *
 * Welcome to the Gmodstore API! You can use our API to access Gmodstore API endpoints, which can be used interact with Gmodstore programmatically.
 *
 * GmodStore API spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Everyday\GmodStoreSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Everyday\GmodStoreSDK\ApiException;
use Everyday\GmodStoreSDK\Configuration;
use Everyday\GmodStoreSDK\HeaderSelector;
use Everyday\GmodStoreSDK\ObjectSerializer;

/**
 * AddonVersionsApi Class Doc Comment
 *
 * @category Class
 * @package  Everyday\GmodStoreSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddonVersionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAddonVersion
     *
     * Create a new version for an addon
     *
     * @param  string $name name (required)
     * @param  string $changelog changelog (required)
     * @param  string $file file (required)
     * @param  string $release_type release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Everyday\GmodStoreSDK\Model\InlineResponse2012
     */
    public function createAddonVersion($name, $changelog, $file, $release_type, $addon_id, $with = null)
    {
        list($response) = $this->createAddonVersionWithHttpInfo($name, $changelog, $file, $release_type, $addon_id, $with);
        return $response;
    }

    /**
     * Operation createAddonVersionWithHttpInfo
     *
     * Create a new version for an addon
     *
     * @param  string $name (required)
     * @param  string $changelog (required)
     * @param  string $file (required)
     * @param  string $release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Everyday\GmodStoreSDK\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAddonVersionWithHttpInfo($name, $changelog, $file, $release_type, $addon_id, $with = null)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2012';
        $request = $this->createAddonVersionRequest($name, $changelog, $file, $release_type, $addon_id, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\InlineResponse2012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAddonVersionAsync
     *
     * Create a new version for an addon
     *
     * @param  string $name (required)
     * @param  string $changelog (required)
     * @param  string $file (required)
     * @param  string $release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAddonVersionAsync($name, $changelog, $file, $release_type, $addon_id, $with = null)
    {
        return $this->createAddonVersionAsyncWithHttpInfo($name, $changelog, $file, $release_type, $addon_id, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAddonVersionAsyncWithHttpInfo
     *
     * Create a new version for an addon
     *
     * @param  string $name (required)
     * @param  string $changelog (required)
     * @param  string $file (required)
     * @param  string $release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAddonVersionAsyncWithHttpInfo($name, $changelog, $file, $release_type, $addon_id, $with = null)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2012';
        $request = $this->createAddonVersionRequest($name, $changelog, $file, $release_type, $addon_id, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAddonVersion'
     *
     * @param  string $name (required)
     * @param  string $changelog (required)
     * @param  string $file (required)
     * @param  string $release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAddonVersionRequest($name, $changelog, $file, $release_type, $addon_id, $with = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling createAddonVersion'
            );
        }
        // verify the required parameter 'changelog' is set
        if ($changelog === null || (is_array($changelog) && count($changelog) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $changelog when calling createAddonVersion'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling createAddonVersion'
            );
        }
        // verify the required parameter 'release_type' is set
        if ($release_type === null || (is_array($release_type) && count($release_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $release_type when calling createAddonVersion'
            );
        }
        // verify the required parameter 'addon_id' is set
        if ($addon_id === null || (is_array($addon_id) && count($addon_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addon_id when calling createAddonVersion'
            );
        }

        $resourcePath = '/addons/{addon_id}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, 'csv', true);
        }
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($addon_id !== null) {
            $resourcePath = str_replace(
                '{' . 'addon_id' . '}',
                ObjectSerializer::toPathValue($addon_id),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($changelog !== null) {
            $formParams['changelog'] = ObjectSerializer::toFormValue($changelog);
        }
        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // form params
        if ($release_type !== null) {
            $formParams['release_type'] = ObjectSerializer::toFormValue($release_type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadAddonVersion
     *
     * Generate a download token for a specific version of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Everyday\GmodStoreSDK\Model\InlineResponse2008
     */
    public function downloadAddonVersion($addon_id, $version_id)
    {
        list($response) = $this->downloadAddonVersionWithHttpInfo($addon_id, $version_id);
        return $response;
    }

    /**
     * Operation downloadAddonVersionWithHttpInfo
     *
     * Generate a download token for a specific version of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Everyday\GmodStoreSDK\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadAddonVersionWithHttpInfo($addon_id, $version_id)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2008';
        $request = $this->downloadAddonVersionRequest($addon_id, $version_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadAddonVersionAsync
     *
     * Generate a download token for a specific version of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAddonVersionAsync($addon_id, $version_id)
    {
        return $this->downloadAddonVersionAsyncWithHttpInfo($addon_id, $version_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadAddonVersionAsyncWithHttpInfo
     *
     * Generate a download token for a specific version of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAddonVersionAsyncWithHttpInfo($addon_id, $version_id)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2008';
        $request = $this->downloadAddonVersionRequest($addon_id, $version_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadAddonVersion'
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadAddonVersionRequest($addon_id, $version_id)
    {
        // verify the required parameter 'addon_id' is set
        if ($addon_id === null || (is_array($addon_id) && count($addon_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addon_id when calling downloadAddonVersion'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling downloadAddonVersion'
            );
        }

        $resourcePath = '/addons/{addon_id}/versions/{version_id}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($addon_id !== null) {
            $resourcePath = str_replace(
                '{' . 'addon_id' . '}',
                ObjectSerializer::toPathValue($addon_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAddonVersion
     *
     * Fetch a specific version of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Everyday\GmodStoreSDK\Model\InlineResponse2012
     */
    public function getAddonVersion($addon_id, $version_id, $with = null)
    {
        list($response) = $this->getAddonVersionWithHttpInfo($addon_id, $version_id, $with);
        return $response;
    }

    /**
     * Operation getAddonVersionWithHttpInfo
     *
     * Fetch a specific version of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Everyday\GmodStoreSDK\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAddonVersionWithHttpInfo($addon_id, $version_id, $with = null)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2012';
        $request = $this->getAddonVersionRequest($addon_id, $version_id, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\InlineResponse2012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAddonVersionAsync
     *
     * Fetch a specific version of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddonVersionAsync($addon_id, $version_id, $with = null)
    {
        return $this->getAddonVersionAsyncWithHttpInfo($addon_id, $version_id, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAddonVersionAsyncWithHttpInfo
     *
     * Fetch a specific version of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddonVersionAsyncWithHttpInfo($addon_id, $version_id, $with = null)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2012';
        $request = $this->getAddonVersionRequest($addon_id, $version_id, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAddonVersion'
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAddonVersionRequest($addon_id, $version_id, $with = null)
    {
        // verify the required parameter 'addon_id' is set
        if ($addon_id === null || (is_array($addon_id) && count($addon_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addon_id when calling getAddonVersion'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling getAddonVersion'
            );
        }

        $resourcePath = '/addons/{addon_id}/versions/{version_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, 'csv', true);
        }
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($addon_id !== null) {
            $resourcePath = str_replace(
                '{' . 'addon_id' . '}',
                ObjectSerializer::toPathValue($addon_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAddonVersions
     *
     * Fetch all the versions of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Everyday\GmodStoreSDK\Model\InlineResponse2007
     */
    public function listAddonVersions($addon_id, $with = null)
    {
        list($response) = $this->listAddonVersionsWithHttpInfo($addon_id, $with);
        return $response;
    }

    /**
     * Operation listAddonVersionsWithHttpInfo
     *
     * Fetch all the versions of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Everyday\GmodStoreSDK\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAddonVersionsWithHttpInfo($addon_id, $with = null)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2007';
        $request = $this->listAddonVersionsRequest($addon_id, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAddonVersionsAsync
     *
     * Fetch all the versions of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAddonVersionsAsync($addon_id, $with = null)
    {
        return $this->listAddonVersionsAsyncWithHttpInfo($addon_id, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAddonVersionsAsyncWithHttpInfo
     *
     * Fetch all the versions of an addon
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAddonVersionsAsyncWithHttpInfo($addon_id, $with = null)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2007';
        $request = $this->listAddonVersionsRequest($addon_id, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAddonVersions'
     *
     * @param  int $addon_id Id of the addon (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listAddonVersionsRequest($addon_id, $with = null)
    {
        // verify the required parameter 'addon_id' is set
        if ($addon_id === null || (is_array($addon_id) && count($addon_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addon_id when calling listAddonVersions'
            );
        }

        $resourcePath = '/addons/{addon_id}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, 'csv', true);
        }
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($addon_id !== null) {
            $resourcePath = str_replace(
                '{' . 'addon_id' . '}',
                ObjectSerializer::toPathValue($addon_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAddonVersion
     *
     * Update a version of an addon
     *
     * @param  string $name name (required)
     * @param  string $changelog changelog (required)
     * @param  string $release_type release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Everyday\GmodStoreSDK\Model\InlineResponse2012
     */
    public function updateAddonVersion($name, $changelog, $release_type, $addon_id, $version_id, $with = null)
    {
        list($response) = $this->updateAddonVersionWithHttpInfo($name, $changelog, $release_type, $addon_id, $version_id, $with);
        return $response;
    }

    /**
     * Operation updateAddonVersionWithHttpInfo
     *
     * Update a version of an addon
     *
     * @param  string $name (required)
     * @param  string $changelog (required)
     * @param  string $release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \Everyday\GmodStoreSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Everyday\GmodStoreSDK\Model\InlineResponse2012, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAddonVersionWithHttpInfo($name, $changelog, $release_type, $addon_id, $version_id, $with = null)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2012';
        $request = $this->updateAddonVersionRequest($name, $changelog, $release_type, $addon_id, $version_id, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\InlineResponse2012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Everyday\GmodStoreSDK\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAddonVersionAsync
     *
     * Update a version of an addon
     *
     * @param  string $name (required)
     * @param  string $changelog (required)
     * @param  string $release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAddonVersionAsync($name, $changelog, $release_type, $addon_id, $version_id, $with = null)
    {
        return $this->updateAddonVersionAsyncWithHttpInfo($name, $changelog, $release_type, $addon_id, $version_id, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAddonVersionAsyncWithHttpInfo
     *
     * Update a version of an addon
     *
     * @param  string $name (required)
     * @param  string $changelog (required)
     * @param  string $release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAddonVersionAsyncWithHttpInfo($name, $changelog, $release_type, $addon_id, $version_id, $with = null)
    {
        $returnType = '\Everyday\GmodStoreSDK\Model\InlineResponse2012';
        $request = $this->updateAddonVersionRequest($name, $changelog, $release_type, $addon_id, $version_id, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAddonVersion'
     *
     * @param  string $name (required)
     * @param  string $changelog (required)
     * @param  string $release_type (required)
     * @param  int $addon_id Id of the addon (required)
     * @param  int $version_id Id of the version (required)
     * @param  string[] $with The relations you want to fetch with the AddonVersion schema (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAddonVersionRequest($name, $changelog, $release_type, $addon_id, $version_id, $with = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling updateAddonVersion'
            );
        }
        // verify the required parameter 'changelog' is set
        if ($changelog === null || (is_array($changelog) && count($changelog) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $changelog when calling updateAddonVersion'
            );
        }
        // verify the required parameter 'release_type' is set
        if ($release_type === null || (is_array($release_type) && count($release_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $release_type when calling updateAddonVersion'
            );
        }
        // verify the required parameter 'addon_id' is set
        if ($addon_id === null || (is_array($addon_id) && count($addon_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addon_id when calling updateAddonVersion'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling updateAddonVersion'
            );
        }

        $resourcePath = '/addons/{addon_id}/versions/{version_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, 'csv', true);
        }
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($addon_id !== null) {
            $resourcePath = str_replace(
                '{' . 'addon_id' . '}',
                ObjectSerializer::toPathValue($addon_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($changelog !== null) {
            $formParams['changelog'] = ObjectSerializer::toFormValue($changelog);
        }
        // form params
        if ($release_type !== null) {
            $formParams['release_type'] = ObjectSerializer::toFormValue($release_type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
